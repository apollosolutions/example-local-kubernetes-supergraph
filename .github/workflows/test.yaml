name: Test Apollo Supergraph

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test-subgraphs:
    name: Test Subgraphs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: subgraphs/package-lock.json

      - name: Install dependencies
        run: |
          cd subgraphs
          npm ci

      - name: Test subgraphs validation
        run: |
          cd subgraphs
          if npm run | grep -q "validate"; then
            npm run validate
          else
            echo "No validate script found, skipping"
          fi

  test-supergraph-composition:
    name: Test Supergraph Composition
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Rover CLI
        run: |
          curl -sSL https://rover.apollo.dev/nix/latest | sh
          echo "$HOME/.rover/bin" >> $GITHUB_PATH

      - name: Test supergraph composition
        run: |
          cd router
          ./compose.sh
          
          # Verify the supergraph file was created
          if [ ! -f "supergraph.graphql" ]; then
            echo "❌ Supergraph composition failed - supergraph.graphql not created"
            exit 1
          fi
          
          # Verify the supergraph contains expected content
          if ! grep -q "join__Graph" supergraph.graphql; then
            echo "❌ Supergraph composition failed - missing join__Graph"
            exit 1
          fi
          
          echo "✅ Supergraph composition successful"

  test-scripts:
    name: Test Helper Scripts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Test script syntax
        run: |
          # Test that all scripts have valid syntax
          for script in *.sh; do
            if [ -f "$script" ]; then
              echo "Testing syntax for $script"
              bash -n "$script" || exit 1
            fi
          done
          
          # Test scripts in scripts directory
          if [ -d "scripts" ]; then
            for script in scripts/*.sh; do
              if [ -f "$script" ]; then
                echo "Testing syntax for $script"
                bash -n "$script" || exit 1
              fi
            done
          fi
          
          echo "✅ All scripts have valid syntax"

      - name: Test script help options
        run: |
          # Test that scripts with help options work
          ./run-k8s.sh --help || exit 1
          ./cleanup.sh --help || exit 1
          ./kill-minikube.sh --help || exit 1
          ./setup-minikube.sh --help || exit 1
          ./setup-env.sh --help || exit 1
          
          echo "✅ All script help options working"

  test-k8s-manifests:
    name: Test Kubernetes Manifests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Set up KinD cluster
        uses: engineerd/setup-kind@v0.5.0

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Validate Kubernetes manifests
        run: |
          # Test namespace
          kubectl apply --dry-run=client -f k8s/namespace.yaml || exit 1
          
          # Test subgraphs deployment (with dummy values)
          NAMESPACE=test SUBGRAPHS_REPLICAS=1 envsubst < k8s/subgraphs-deployment-clusterip.yaml | \
            kubectl apply --dry-run=client -f - || exit 1
          
          # Test router deployment (with dummy values)
          NAMESPACE=test ROUTER_REPLICAS=1 APOLLO_GRAPH_REF=test@test APOLLO_KEY=test envsubst < k8s/router-deployment-clusterip.yaml | \
            kubectl apply --dry-run=client -f - || exit 1
          
          # Test ingress
          kubectl apply --dry-run=client -f k8s/ingress.yaml || exit 1
          
          echo "✅ All Kubernetes manifests are valid"
